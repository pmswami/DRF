api_view is python decorator which converts your python functions into an API View. It modifies function behaviour so that it can handle all the APi responses Views.
Serializers =>
    Serializers are used to convert complex data types, such as Django model instances, into Python data types that can be easily rendered into JSON, XML, or other content types.
    Serializers also provide deserialization, allowing parsed data to be converted back into complex types after first validating the incoming data.
    Serializers in Django are a part of the Django REST framework, a powerful and flexible toolkit for building Web APIs.
    The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.
    Serializers provide validate() method for validating inputs.
    Serializers provide serializers.SerializerMethodField() method field to define custom fields.
    serializers.Serializer ise used to write custom serializer with custom validations without model being used/attched.
    https://www.django-rest-framework.org/api-guide/serializers/

APIView =>
    Using the APIView class is pretty much the same as using a regular View class, as usual, the incoming request is dispatched to an appropriate handler method such as .get() or .post()
    Handler methods may return REST framework's Response
    class based View
    https://www.django-rest-framework.org/api-guide/views/

Status Codes =>
     REST framework includes a set of named constants that you can use to make your code more obvious and readable.
     from rest_framework import status
    https://www.django-rest-framework.org/api-guide/status-codes/

Authentication =>
    https://www.django-rest-framework.org/api-guide/authentication/
    Basic Authentication in Django REST Framework uses HTTP Basic Authentication.
    The REST framework will attempt to authenticate the Basic Authentication class and set the returned values to request.user and request.auth. If successfully authenticated, BasicAuthentication provides the following credentials.

    request.user will be a Django User instance.
    request.auth will be None.

    if not, the value of request.user will be set to as an instance of django.contrib.auth.models.AnonymousUser, and request.auth will be set to None.

Permissions =>
    https://www.django-rest-framework.org/api-guide/permissions/
    Together with authentication and throttling, permissions determine whether a request should be granted or denied access.
    Permission checks are always run at the very start of the view, before any other code is allowed to proceed. Permission checks will typically use the authentication information in the request.user and request.auth properties to determine if the incoming request should be permitted.
    Permissions are used to grant or deny access for different classes of users to different parts of the API.
    The simplest style of permission would be to allow access to any authenticated user, and deny access to any unauthenticated user. This corresponds to the IsAuthenticated class in REST framework.
    A slightly less strict style of permission would be to allow full access to authenticated users, but allow read-only access to unauthenticated users. This corresponds to the IsAuthenticatedOrReadOnly class in REST framework.

Pagination =>
    https://www.django-rest-framework.org/api-guide/pagination/
    REST framework includes support for customizable pagination styles. This allows you to modify how large result sets are split into individual pages of data.
    The pagination API can support either:
        Pagination links that are provided as part of the content of the response.
        Pagination links that are included in response headers, such as Content-Range or Link.
    The built-in styles currently all use links included as part of the content of the response. This style is more accessible when using the browsable API.
    Pagination is only performed automatically if you're using the generic views or viewsets. If you're using a regular APIView, you'll need to call into the pagination API yourself to ensure you return a paginated response.

Action in ModelViewSet =>
    https://www.django-rest-framework.org/api-guide/viewsets/#viewset-actions
